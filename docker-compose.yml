version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: geodb
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD_HASH: $$2b$$10$$lCxgHGe69we2.XANepOc8ubBEToPBU5GZzODCM5h43ILypoPAAvR.
      JWT_SECRET: 'B25FlgLoiDe46'
      JWT_EXPIRES_IN: '1h'
      # Добавляем переменные для Redis
      REDIS_HOST: redis        # Имя сервиса Redis в Docker Compose
      REDIS_PORT: 6379         # Стандартный порт Redis
    depends_on:
      db:
        condition: service_healthy
      # Добавляем зависимость от Redis
      redis:
        condition: service_started # Достаточно, чтобы сервис запустился
    networks:
      - app-network

  db:
    image: postgis/postgis:17-3.5-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: geodb
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d geodb"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Добавляем сервис Redis
  redis:
    image: redis:alpine          # Используем легковесный образ Redis
    ports:
      - "6379:6379"             # Пробрасываем порт для возможного внешнего доступа/отладки
    networks:
      - app-network
    volumes:
      - redis-data:/data        # Сохраняем данные Redis

volumes:
  postgres-data:
  redis-data:                  # Том для данных Redis

networks:
  app-network:
    driver: bridge